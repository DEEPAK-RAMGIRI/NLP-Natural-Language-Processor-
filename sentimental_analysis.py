# -*- coding: utf-8 -*-
"""Sentimental analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hxI5lt2vXxLKeUz2Stf5-owEA0ouKQq9
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import nltk

import kagglehub
from kagglehub import KaggleDatasetAdapter
file_path = "Reviews.csv"

data = kagglehub.dataset_load(
  KaggleDatasetAdapter.PANDAS,
  "snap/amazon-fine-food-reviews",
  file_path,
)

data.head(5)
data.tail(4)

data[['Text','Score']][:5]

data.shape

data = data.head(1000)

data.shape

graph = data['Score'].value_counts().sort_index()
print(graph)
graph.plot(kind='bar')
plt.title('Reviews')
plt.xlabel('Score')
plt.ylabel('Frequency')
plt.show()

nltk.download('vader_lexicon')

from nltk.sentiment import SentimentIntensityAnalyzer
from tqdm.notebook import tqdm

sa = SentimentIntensityAnalyzer()
sa.polarity_scores("iam a good boy")

data[['Text','Score']]

example = data.iloc[5]
example['Text']

example['Score']

sa.polarity_scores(example['Text'])

nltk.download('punkt_tab')

# sa polarity words works on text not on tokens
# tokens =nltk.word_tokenize(example['Text'])
# sa.polarity_scores(tokens)

res = {}
for i,row in tqdm(data.iterrows(),total = len(data)):
  text = row['Text']
  id = row['Id']
  res[id] = sa.polarity_scores(text)

vaders = pd.DataFrame(res).T
vaders = vaders.reset_index().rename(columns={'index': 'Id'})
vaders = vaders.merge(data, how='left')

vaders

bar_graph = sns.barplot(data = vaders,x = 'Score',y = 'compound')
bar_graph.set_title('Compound Score')
plt.show()

fig, axs = plt.subplots(1, 3, figsize=(12, 3))
sns.barplot(data=vaders, x='Score', y='pos', ax=axs[0])
sns.barplot(data=vaders, x='Score', y='neu', ax=axs[1])
sns.barplot(data=vaders, x='Score', y='neg', ax=axs[2])
axs[0].set_title('Positive')
axs[1].set_title('Neutral')
axs[2].set_title('Negative')
plt.tight_layout()
plt.show()

from transformers import AutoTokenizer
from transformers import AutoModelForSequenceClassification
from scipy.special import softmax

#ROBERTA MODEL
model = f"cardiffnlp/twitter-roberta-base-sentiment"
tokenizer = AutoTokenizer.from_pretrained(model)
model = AutoModelForSequenceClassification.from_pretrained(model)

sa.polarity_scores(example['Text'])

example['Text']

def polarity_scores_roberta(example):

  embedded_text = tokenizer(example, return_tensors="pt")
  ouput = model(**embedded_text)
  scores = ouput[0][0].detach().numpy()
  scores = softmax(scores)
  scores_dict = {
      'neg': scores[0],
      'neu': scores[1],
      'pos': scores[2]
  }
  return scores_dict

res = {}
for i, row in tqdm(data.iterrows(), total=len(data)):
    try:
        text = row['Text']
        myid = row['Id']
        vader_result = sa.polarity_scores(tex t)
        vader_result_rename = {}
        for key, value in vader_result.items():
            vader_result_rename[f"vader_{key}"] = value
        roberta_result = polarity_scores_roberta(text)
        both = {**vader_result_rename, **roberta_result}
        res[myid] = both
    except RuntimeError:
        print(f'Broke for id {myid}')

results_df = pd.DataFrame(res).T
results_df = results_df.reset_index().rename(columns={'index': 'Id'})
results_df = results_df.merge(data, how='left')

results_df.columns

sns.pairplot(data=results_df,
             vars=['vader_neg', 'vader_neu', 'vader_pos',
                  'neg', 'neu', 'pos'],
            hue='Score',
            palette='tab10')
plt.show()

from transformers import pipeline

sent_pipeline = pipeline("sentiment-analysis",
                         model="cardiffnlp/twitter-roberta-base-sentiment")

def sentiment_analysis(inputs):
    labels = {0: "Negative", 1: "Neutral", 2: "Positive"}

    text = inputs
    result = sent_pipeline(text)

    for r in result:
        label_num = int(r['label'].split('_')[-1])
        print(labels[label_num], r['score'])

sentiment_analysis('I love sentiment analysis!')

sentiment_analysis('You_r to naive to understand this')

sentiment_analysis('this is not cut for u guys i mean you guys are damn strong to understand this')

sentiment_analysis('wow u failed in this  subject, i know your are very good')